# Ultralytics YOLOLite 🚀

task: detect  # (str) YOLO 任务类型，例如 detect（检测）
mode: train  # (str) YOLO 模式，例如 train（训练）、val（验证）、predict（预测）

# 训练设置 -------------------------------------------------------------------------------------------------------
model:  # (str, optional) 模型文件路径，例如 yolov8n.pt、yolov8n.yaml
data:  # (str, optional) 数据文件路径，例如 coco8.yaml
epochs: 100  # (int) 训练的总周期数
time:  # (float, optional) 训练时间（小时），如果提供则覆盖 epochs
patience: 100  # (int) 在没有可观察改进时，提前停止训练的等待周期数
batch: 16  # (int) 每批次图像数量（-1 表示自动批量）
imgsz: 640  # (int | list) 输入图像大小，训练和验证模式下为整数，预测和导出模式下为列表[h, w]
save: True  # (bool) 是否保存训练检查点和预测结果
save_period: -1  # (int) 每 x 个周期保存一次检查点（小于 1 时禁用）
device:  # (int | str | list, optional) 运行设备，例如 cuda device=0 或 device=0,1,2,3 或 device=cpu
workers: 8  # (int) 数据加载的工作线程数（每个 RANK 如果使用 DDP）
project:  # (str, optional) 项目名称
name:  # (str, optional) 实验名称，结果保存到 'project/name' 目录
exist_ok: False  # (bool) 是否覆盖现有实验
pretrained: True  # (bool | str) 是否使用预训练模型（布尔值）或加载权重的模型（字符串）
optimizer: auto  # (str) 使用的优化器，选择项=[SGD, Adam, Adamax, AdamW, NAdam, RAdam, RMSProp, auto]
verbose: True  # (bool) 是否打印详细输出
seed: 0  # (int) 随机种子，用于可复现性
deterministic: True  # (bool) 是否启用确定性模式
single_cls: False  # (bool) 将多类数据作为单类进行训练
rect: False  # (bool) 如果模式为 'train' 则为矩形训练，模式为 'val' 则为矩形验证
cos_lr: False  # (bool) 是否使用余弦学习率调度
close_mosaic: 10  # (int) 在最后的周期禁用马赛克增强（0 表示禁用）
resume: False  # (bool) 从最后的检查点恢复训练
amp: False  # (bool) 自动混合精度（AMP）训练，选择项=[True, False]，True 表示运行 AMP 检查
profile: False  # (bool) 在训练期间记录 ONNX 和 TensorRT 的速度以供日志使用
freeze: None  # (int | list, optional) 冻结前 n 层，或在训练期间冻结层索引列表
multi_scale: False  # (bool) 是否在训练期间使用多尺度

# 分割设置
overlap_mask: True  # (bool) 在训练期间将对象掩码合并为单个图像掩码（仅针对分割训练）
mask_ratio: 4  # (int) 掩码下采样比例（仅针对分割训练）

# 分类设置
dropout: 0.0  # (float) 是否使用 dropout 正则化（仅针对分类训练）

# 验证/测试设置 ----------------------------------------------------------------------------------------------------
val: True  # (bool) 在训练期间进行验证/测试
split: val  # (str) 用于验证的数据集拆分，例如 'val'、'test' 或 'train'
save_json: False  # (bool) 是否将结果保存为 JSON 文件
save_hybrid: False  # (bool) 是否保存标签的混合版本（标签 + 额外预测）
conf:  # (float, optional) 检测的对象置信度阈值（默认 0.25 预测，0.001 验证）
iou: 0.7  # (float) 非最大抑制（NMS）的交并比（IoU）阈值
max_det: 300  # (int) 每张图像的最大检测数量
half: False  # (bool) 是否使用半精度（FP16）
dnn: False  # (bool) 是否使用 OpenCV DNN 进行 ONNX 推理
plots: True  # (bool) 在训练/验证期间是否保存图形和图像

# 预测设置 -----------------------------------------------------------------------------------------------------
source:  # (str, optional) 图像或视频的源目录
vid_stride: 1  # (int) 视频帧率步幅
stream_buffer: False  # (bool) 缓冲所有流媒体帧（True）或返回最新帧（False）
visualize: False  # (bool) 是否可视化模型特征
augment: False  # (bool) 是否对预测源应用图像增强
agnostic_nms: False  # (bool) 类无关的 NMS
classes:  # (int | list[int], optional) 按类别过滤结果，例如 classes=0，或 classes=[0,2,3]
retina_masks: False  # (bool) 是否使用高分辨率分割掩码
embed:  # (list[int], optional) 从给定层返回特征向量/嵌入

# 可视化设置 ---------------------------------------------------------------------------------------------------
show: False  # (bool) 如果环境允许，是否显示预测的图像和视频
save_frames: False  # (bool) 是否保存预测的单个视频帧
save_txt: False  # (bool) 是否将结果保存为 .txt 文件
save_conf: False  # (bool) 是否保存带置信度分数的结果
save_crop: False  # (bool) 是否保存带结果的裁剪图像
show_labels: True  # (bool) 是否显示预测标签，例如 'person'
show_conf: True  # (bool) 是否显示预测置信度，例如 '0.99'
show_boxes: True  # (bool) 是否显示预测边界框
line_width:  # (int, optional) 边界框的线宽。如果为 None，则按图像大小缩放。

# 导出设置 ------------------------------------------------------------------------------------------------------
format: torchscript  # (str) 导出的格式，选择项见 https://docs.ultralytics.com/modes/export/#export-formats
keras: False  # (bool) 是否使用 Keras
optimize: False  # (bool) TorchScript：是否针对移动设备进行优化
int8: False  # (bool) CoreML/TF INT8 量化
dynamic: False  # (bool) ONNX/TF/TensorRT：是否允许动态轴
simplify: True  # (bool) ONNX：是否使用 `onnxslim` 简化模型
opset:  # (int, optional) ONNX：opset 版本
workspace: 4  # (int) TensorRT：工作区大小（GB）
nms: False  # (bool) CoreML：是否添加 NMS

# 超参数 ------------------------------------------------------------------------------------------------------
lr0: 0.01  # (float) 初始学习率（例如，SGD=1E-2，Adam=1E-3）
lrf: 0.01  # (float) 最终学习率（lr0 * lrf）
momentum: 0.937  # (float) SGD 动量/Adam beta1
weight_decay: 0.0005  # (float) 优化器权重衰减 5e-4
warmup_epochs: 3.0  # (float) 热身周期（允许小数）
warmup_momentum: 0.8  # (float) 热身初始动量
warmup_bias_lr: 0.1  # (float) 热身初始偏置学习率
box: 7.5  # (float) 边界框损失增益
cls: 0.5  # (float) 类别损失增益（与像素缩放）
dfl: 1.5  # (float) DFL 损失增益
pose: 12.0  # (float) 姿态损失增益
kobj: 1.0  # (float) 关键点对象损失增益
label_smoothing: 0.0  # (float) 标签平滑（分数）
nbs: 64  # (int) 名义批量大小
hsv_h: 0.015  # (float) 图像 HSV-Hue 增强（分数）
hsv_s: 0.7  # (float) 图像 HSV-Saturation 增强（分数）
hsv_v: 0.4  # (float) 图像 HSV-Value 增强（分数）
degrees: 0.0  # (float) 图像旋转（+/- 度）
translate: 0.1  # (float) 图像平移（+/- 分数）
scale: 0.5  # (float) 图像缩放（+/- 增益）
shear: 0.0  # (float) 图像剪切（+/- 度）
perspective: 0.0  # (float) 图像透视（+/- 分数），范围 0-0.001
flipud: 0.0  # (float) 图像上下翻转（概率）
fliplr: 0.5  # (float) 图像左右翻转（概率）
bgr: 0.0  # (float) 图像通道 BGR（概率）
mosaic: 1.0  # (float) 图像马赛克（概率）
mixup: 0.0  # (float) 图像混合（概率）
copy_paste: 0.0  # (float) 分段复制粘贴（概率）
copy_paste_mode: "flip"  # (str) 执行复制粘贴增强的方法（翻转、混合）
auto_augment: randaugment  # (str) 分类的自动增强策略（randaugment、autoaugment、augmix）
erasing: 0.4  # (float) 分类训练期间随机擦除的概率（0-0.9），0 表示不擦除，必须小于 1.0。
crop_fraction: 1.0  # (float) 分类的图像裁剪比例（0.1-1），1.0 表示不裁剪，必须大于 0。

# 自定义配置文件 config.yaml ---------------------------------------------------------------------------------------------------
cfg:  # (str, optional) 用于覆盖 defaults.yaml

# 跟踪器设置 ------------------------------------------------------------------------------------------------------
tracker: botsort.yaml  # (str) 跟踪器类型，选择项=[botsort.yaml, bytetrack.yaml]